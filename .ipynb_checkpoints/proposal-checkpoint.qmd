---
title: "Anomaly Detection in Network Traffic Using NSL-KDD Dataset"
subtitle: "Proposal"
author: 
  - name: "Team 7 - Mehran Tajbakhsh"
    affiliations:
      - name: "College of Information Science, University of Arizona"
description: "  This project investigates the detection of anomalous network behavior using both statistical and machine learning techniques.<br>
The study leverages the **NSL-KDD dataset**, a refined version of the **KDD Cup 1999** intrusion detection benchmark, to evaluate
different approaches for distinguishing between normal and malicious network traffic. <br>
<br>
The project compares two methodological categories:<br>

- **Unsupervised anomaly detection**, where models learn only from normal traffic and must identify outliers without attack labels.<br>
- **Supervised intrusion detection**, where labeled attack data are used to train classifiers to recognize known attack patterns.<br>
<br>
       
The actual NSL-KDD dataset is fairly large, containing nearly **4 million connection records**.<br>
To make the analysis computationally feasible while preserving the dataset’s diversity, this project will use a **randomly selected 10% subset** of the full data. This reduced sample maintains representative proportions of normal and attack classes, ensuring statistical validity while allowing for more efficient experimentation and model tuning. <br>
<br>
The project will also address class imbalance through resampling and weighting techniques, apply standardized preprocessing (encoding, scaling, and feature selection), and evaluate each model’s performance using threshold-based anomaly scoring and classification metrics.<br>  
  The ultimate goal is to develop a **robust, interpretable intrusion detection framework** suitable for **enterprise and IoT network environments**.
"
format:
  html:
    code-tools: true
    code-overflow: wrap
    code-line-numbers: true
    embed-resources: true
editor: visual
code-annotations: hover
execute:
  warning: false
jupyter: python3
---

```{python}
#| label: load-pkgs
#| message: false
#| output: false
#| echo: false
import pandas as pd
from pathlib import Path
from myst_nb import glue
```

## Dataset

```{python}
#| label: load-dataset
#| echo: false
#| message: false
#| output: false


data_path = Path("./data/NSL-KDD.data_10_percent_corrected")

base_cols = [
    "duration","protocol_type","service","flag","src_bytes","dst_bytes",
    "land","wrong_fragment","urgent","hot","num_failed_logins","logged_in",
    "num_compromised","root_shell","su_attempted","num_root","num_file_creations",
    "num_shells","num_access_files","num_outbound_cmds","is_host_login",
    "is_guest_login","count","srv_count","serror_rate","srv_serror_rate",
    "rerror_rate","srv_rerror_rate","same_srv_rate","diff_srv_rate",
    "srv_diff_host_rate","dst_host_count","dst_host_srv_count",
    "dst_host_same_srv_rate","dst_host_diff_srv_rate",
    "dst_host_same_src_port_rate","dst_host_srv_diff_host_rate",
    "dst_host_serror_rate","dst_host_srv_serror_rate",
    "dst_host_rerror_rate","dst_host_srv_rerror_rate"
]

tmp = pd.read_csv(data_path, header=None)
if tmp.shape[1] == 42:
    tmp.columns = base_cols + ["label"]
elif tmp.shape[1] == 43:
    tmp.columns = base_cols + ["label","difficulty"]
else:
    raise ValueError(f"Unexpected column count {tmp.shape[1]} for KDD 10% file.")

df = tmp
df["label"] = df["label"].astype(str).str.strip().str.lower()

def map_family(lbl: str) -> str:
    if lbl == "normal.": return "normal"
    l = lbl
    if any(x in l for x in ["neptune","smurf","back","teardrop","pod","land","apache2","udpstorm","processtable","worm","mailbomb"]):
        return "DoS"
    if any(x in l for x in ["satan","ipsweep","nmap","portsweep","mscan","saint"]):
        return "Probe"
    if any(x in l for x in ["guess_passwd","ftp_write","imap","phf","multihop","warezmaster","warezclient","spy","xlock","xsnoop","snmpgetattack","snmpguess","httptunnel","sendmail","named","worm_r2l"]):
        return "R2L"
    if any(x in l for x in ["buffer_overflow","loadmodule","perl","rootkit","sqlattack","xterm","ps","httptunnel_u2r"]):
        return "U2R"
    return "attack_other"

df["family"] = df["label"].apply(map_family)

# ---- Inline stats (suppress display) ----
n_rows, n_cols = df.shape
n_features = n_cols - (2 if "difficulty" in df.columns else 1)

glue("n_rows", n_rows, display=False)
glue("n_cols", n_cols, display=False)
glue("n_features", int(n_features), display=False)
glue("has_difficulty", "yes" if "difficulty" in df.columns else "no", display=False)

# Family percentages + counts
fam_pct = df["family"].value_counts(normalize=True).mul(100)
fam_cnt = df["family"].value_counts()

for fam in ["normal","DoS","Probe","R2L","U2R"]:
    glue(f"p_{fam}", float(fam_pct.get(fam, 0.0)), display=False)
    glue(f"c_{fam}", int(fam_cnt.get(fam, 0)), display=False)

```
The NSL-KDD dataset is an enhanced version of the KDD Cup 1999 intrusion detection benchmark. <bt>
It removes redundant records and provides a more balanced sample distribution for fair model evaluation. <br>
Each record represents a network connection with 41 features describing various characteristics such as protocol type, service, traffic flags, and packet statistics.<br>
The target label identifies whether a connection is normal or belongs to one of four attack families: <br>
- **DoS (Denial of Service):** Overwhelms system resources (e.g., neptune, smurf, teardrop) <br>
- **Probe:** Scans for vulnerabilities or open ports (e.g., satan, nmap, ipsweep) <br>
- **R2L (Remote to Local):** Attempts to gain access remotely (e.g., guess_passwd, imap) <br>
- **U2R (User to Root):** Escalates privileges locally (e.g., rootkit, buffer_overflow) <br>
```{python}
#| label: Dataset Summary
#| echo: false
#| message: false

md = f"""
This analysis uses the 10% of NSL-KDD corrected file with {n_rows} rows and {n_cols} columns.

In the context of intrusion detection, the dataset encompasses four main families of 
attack behaviors: Denial of Service (DoS), Probe, Remote to Local (R2L),
and User to Root (U2R): 

- normal: {df["family"].value_counts(normalize=True).mul(100).get("normal", 0):.2f}% (n = {df["family"].value_counts().get("normal", 0)})
- DoS: {df["family"].value_counts(normalize=True).mul(100).get("DoS", 0):.2f}% (n = {df["family"].value_counts().get("DoS", 0)})
- Probe: {df["family"].value_counts(normalize=True).mul(100).get("Probe", 0):.2f}% (n = {df["family"].value_counts().get("Probe", 0)})
- R2L: {df["family"].value_counts(normalize=True).mul(100).get("R2L", 0):.2f}% (n = {df["family"].value_counts().get("R2L", 0)})
- U2R: {df["family"].value_counts(normalize=True).mul(100).get("U2R", 0):.2f}% (n = {df["family"].value_counts().get("U2R", 0)})
"""

print(md)

```

**Why this dataset?** <br> It’s the canonical benchmark for intrusion/anomaly detection and complements NSL-KDD, which addresses redundancy/imbalance issues. Its size, variety of features (categorical + numeric), and labeled attacks make it ideal for comparing statistical (Z-Score, Elliptical Envelope, LOF, DBSCAN) and ML detectors (Isolation Forest, OC-SVM, Deep Autoencoders).

## Methodology Overview

This project will implement two complementary detection approaches to compare how well statistical and learning-based methods can detect network intrusions. <br>

| **Approach Type** | **Algorithms** | **Training Data** | **Evaluation Strategy** |
|--------------------|----------------|-------------------|--------------------------|
| **Unsupervised Anomaly Detection** | Z-Score, Elliptic Envelope, Local Outlier Factor (LOF), DBSCAN | Trained only on **normal traffic** (no attack labels) | Evaluate anomaly scores using percentile-based thresholding (e.g., top 5% as anomalies); compute precision, recall, and false positive rate against true labels |
| **Supervised / Semi-Supervised Intrusion Detection** | Random Forest, Support Vector Machine (SVM), Isolation Forest, Deep Autoencoder | Trained on **labeled normal and attack traffic** | Evaluate using stratified 80/20 train-test split with **5-fold cross-validation**; compare Precision, Recall, F1-score, and ROC-AUC |

:::{.center}
*Table 1. Comparison of Supervised vs. Unsupervised Detection Approaches.*
:::

## Threshold Definition for Unsupervised Models:
For models like LOF and DBSCAN, anomaly scores will be transformed into binary outcomes using a threshold determined by the 95th percentile of the score distribution on training data. Models will be compared based on precision, recall, and false positive rate against true attack labels.

## Data Preprocessing and Feature Handling

- **Feature Encoding:** Categorical features (`protocol_type`, `service`, and `flag`) will be transformed using **One-Hot Encoding** to convert them into numerical representations suitable for machine learning models.<br>

- **Scaling:** All numeric features will be standardized using **StandardScaler** to normalize feature magnitudes and support distance-based models such as SVM, LOF, and DBSCAN.<br>

- **Dimensionality Reduction:** **Principal Component Analysis (PCA)** will be applied to reduce feature dimensionality, minimize noise, and visualize decision boundaries in lower dimensions.<br>

- **Latent-Space Visualization:** Beyond PCA, t-SNE and UMAP will be applied to project high-dimensional data into 2D latent spaces. These visualizations will reveal natural clustering between normal and attack traffic, and illustrate how different models separate anomalous connections.<br>

- **Feature Selection:** Correlation filtering and low-variance thresholding will be used to eliminate redundant and non-informative predictors.<br>

- **Train/Test Split:** A **stratified 80/20 split** will ensure consistent class ratios between training and testing datasets, preserving representation of all attack families.<br>

- **Cross-Validation:** For supervised learning models, **5-fold cross-validation** will be applied to ensure stable and generalizable results.<br>

- **Class Imbalance Handling:** Severe imbalance in **R2L** and **U2R** attack classes will be mitigated using **SMOTE (Synthetic Minority Oversampling Technique)** and **class-weight adjustments** during model training.<br>

## Model Interpretability

To ensure transparency and explainability in the results, this project will include interpretability analysis for both supervised and unsupervised models:<br>

- **Tree-Based Models (Random Forest):** Feature importance plots will be used to identify the most influential network attributes contributing to intrusion detection decisions.<br>

- **SVM and Deep Autoencoders:** The **SHAP (SHapley Additive exPlanations)** framework will be applied to quantify how each input feature affects individual model predictions, highlighting both global and local interpretability.<br>

- **Unsupervised Models (LOF, DBSCAN, Elliptic Envelope):** Model behavior will be interpreted through visualization of **PCA-based decision boundaries**, **cluster separations**, and **anomaly score distributions**.<br>

- **Autoencoder Reconstruction Analysis:** For deep learning models, reconstruction error plots will be examined to understand how effectively normal vs. anomalous traffic patterns are captured and separated.<br>

- **Combined Insights:** Comparing interpretability outputs across models will help evaluate the trade-off between detection accuracy and explainability—an important factor in real-world IDS deployment.<br>

- **Interpretability Trade-Offs:** Comparative analysis will examine the balance between model transparency and detection power. While deep or ensemble methods may offer superior accuracy, their complexity can obscure decision rationale. Simpler statistical models, though less accurate, provide clearer interpretive insights valuable for security analysts. This trade-off will be explicitly discussed in the results and conclusions.<br>

## Evaluation Setup 

The evaluation process will assess the performance, robustness, and reliability of all models through a consistent and structured framework:<br>

- **Performance Metrics:** Model effectiveness will be quantified using **Precision**, **Recall**, **F1-Score**, **ROC-AUC**, and **Detection Rate** to capture both classification accuracy and anomaly detection strength.<br>

- **Validation Strategy:** Results will be validated through a combination of **stratified 80/20 train–test split** and **5-fold cross-validation** to ensure generalization and mitigate overfitting.<br>

- **Family-Wise and Rare Attack Evaluation:** Each attack family (DoS, Probe, R2L, and U2R) will be evaluated independently, with special attention to rare classes (R2L and U2R). Detection rates, false negatives, and confusion patterns for these low-frequency attacks will reveal how well unsupervised and supervised approaches generalize to scarce attack behaviors.<br>

- **Threshold Optimization (Unsupervised Models):** Anomaly score thresholds (e.g., top 5% or 95th percentile) will be tuned on the training data to balance false positives and false negatives.<br>

- **Baseline Comparison:** Model results will be benchmarked against **published NSL-KDD baselines** and recent IDS studies to contextualize performance improvements.<br>

- **Visualization:** ROC curves, confusion matrices, and precision–recall plots will be used to visually compare detection quality and identify performance trade-offs among methods.<br>

## Questions

1. How effectively can unsupervised anomaly detection methods identify malicious network traffic when trained only on normal data? <br>

2. How does the performance of supervised machine learning–based intrusion detection compare with statistical anomaly detection methods in terms of detection accuracy, precision, recall, and interpretability?

## Real-World Application Context

This project models an **enterprise network intrusion detection system (IDS)**.<br>
In real-world settings, such systems continuously monitor inbound and outbound connections to detect unusual traffic patterns.
Findings from this analysis can be directly extended to:<br>
- **Enterprise network monitoring**<br>
- **Cloud service intrusion prevention**<br>
- **IoT network anomaly detection**<br>
- **Streaming data analysis** using similar architectures (e.g., online learning or real-time inference)<br>

## Dataset Limitations and Justification

Although the **NSL-KDD dataset** is dated and does not reflect modern encrypted or high-volume network traffic, it remains widely used in academic research because:<br>

- It contains **well-structured, labeled attack categories**, making it ideal for benchmarking and comparing different algorithms.<br>

- It enables **controlled, reproducible comparisons** between models without introducing data privacy or confidentiality issues.<br>

- It provides **clear ground truth labels**, which are often unavailable in modern or proprietary network traffic datasets.<br>

The goal is to develop and compare generalizable anomaly detection methods, which can later be adapted to more recent or proprietary datasets.<br>

## Reproducibility and Version Control

To ensure that all results are consistent and reproducible across runs and environments, this project follows strict versioning and organization practices:<br>

- **Random Seeds:** All random processes (e.g., data splits, model initialization, SMOTE) will use **fixed random seeds** to ensure reproducibility.<br>

- **Repository Organization:** The project repository will follow a clear, modular directory structure to separate data, notebooks, and sources.<br>

```text
project-root/
│
├── data/                # Raw and processed datasets
├── notebooks/           # Jupyter notebooks for analysis and modeling
├── src/                 # Preprocessing and utility code
├── requirements.txt     # Python dependencies for environment setup
└── README.md            # Project overview and usage instructions
```
- Experiment tracking will be implemented using **versioned notebooks and GitHub commits**, ensuring reproducibility.<br>
- Dependencies and environment configuration will be captured in a requirements.txt file.<br>

- All visualizations, experiment logs, and performance metrics will be versioned and stored in the repository for transparent result verification.<br>

## Analysis plan

**Week 1 –** Problem Definition & Data Preparation
The first week focuses on defining the objectives of anomaly detection within the NSL-KDD dataset. The dataset will be loaded, inspected, and preprocessed to ensure analytical readiness. Tasks include handling missing values, encoding categorical features, and scaling numerical variables.
Deliverables: Data preparation notebook and summary report.

**Week 2 –** Exploratory Data Analysis (EDA)
This phase aims to understand data distributions, feature correlations, and patterns of normal versus attack traffic. Visualization techniques will be applied to highlight key discriminative features and potential sources of anomaly.
Deliverables: EDA notebook with visual insights and descriptive summaries.

**Week 3 –** Statistical Anomaly Detection Methods
In this stage, classical statistical methods for anomaly detection will be implemented, including Z-Score, Elliptical Envelope, Local Outlier Factor (LOF), and DBSCAN. Their performance in identifying abnormal network behaviors will be analyzed and compared.
Deliverables: Statistical anomaly detection notebook and comparative summary.

**Week 4 –** Machine Learning–Based Methods
Modern learning-based detectors will be explored using Isolation Forest, One-Class SVM, and Deep Autoencoders. Models will be tuned for optimal performance, and detection boundaries will be visualized to interpret decision behavior.
Deliverables: ML anomaly detection notebook and evaluation metrics.

**Week 5 –** Model Evaluation and Comparison
All implemented methods will be assessed using standard performance metrics such as Precision, Recall, F1-score, ROC-AUC, and Detection Rate. Comparative analyses and ablation studies will be performed to evaluate robustness and generalization.
Deliverables: Evaluation notebook and performance report.

**Week 6 –** Final Analysis & Reporting
The final week synthesizes results into a comprehensive assessment of the effectiveness of different anomaly detection techniques. The findings will discuss practical implications, advantages, and limitations of each approach in real-world intrusion detection scenarios.
Additionally, a **reflection phase** will visualize anomaly scores and latent embeddings (via PCA, t-SNE, UMAP) to assess separability between normal and attack samples. The final report will include a **comparative interpretability reflection**, discussing how the transparency–accuracy balance affects IDS deployment decisions.<br>
Deliverables: Final project report and presentation slides.