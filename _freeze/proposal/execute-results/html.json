{
  "hash": "d53f94c10f1f1063fc86c98585546e4c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Anomaly Detection in Network Traffic Using NSL-KDD Dataset\"\nsubtitle: \"Proposal\"\nauthor: \n  - name: \"Team 7 - Mehran Tajbakhsh\"\n    affiliations:\n      - name: \"College of Information Science, University of Arizona\"\ndescription: \"The goal of this project is to detect anomalies in network traffic data using a combination of statistical and machine learning techniques.<br>\nAnomalies, or outliers, are data points that deviate significantly from normal behavior. In cybersecurity contexts, these anomalies often correspond to intrusions, attacks, or fraudulent activities.<br>\nI will use the NSL-KDD dataset, a well-established benchmark for evaluating intrusion detection systems (IDS). Through a structured process of exploratory data analysis, statistical anomaly detection, and machine learning modeling, this project aims to build a robust anomaly detection framework capable of identifying malicious network activity.<br>\nThe actual NSL-KDD dataset is fairly large (nearly 4 million records). I will be using a smaller version of the data that is a 10% subset randomly sampled from the whole data.<br>\nFinally, I will compare performance across these methods and evaluate their ability to correctly flag network intrusions as anomalies.\n\"\nformat:\n  html:\n    code-tools: true\n    code-overflow: wrap\n    code-line-numbers: true\n    embed-resources: true\neditor: visual\ncode-annotations: hover\nexecute:\n  warning: false\njupyter: python3\n---\n\n\n\n## Dataset\n\n\n\nThe **NSL-KDD** dataset is an improved successor to **KDD Cup 1999**, designed to mitigate key issues such as redundant records and extreme class imbalance.<br>It comprises **network connection records** with **41 features** (transport/application protocol, service, flag indicators, traffic statistics, etc.) and a label indicating **normal** or one of several **attack types** grouped into four categories: **DoS**, **Probe**, **R2L**, and **U2R**.\n\n::: {#dataset-summary .cell message='false' execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThis analysis uses the 10% of NSL-KDD corrected file with 494021 rows and 43 columns.\n\nIn the context of intrusion detection, the dataset encompasses four main families of \nattack behaviors: Denial of Service (DoS), Probe, Remote to Local (R2L),\nand User to Root (U2R): \n\n- normal: 19.69% (n = 97278)\n- DoS: 79.24% (n = 391458)\n- Probe: 0.83% (n = 4107)\n- R2L: 0.23% (n = 1126)\n- U2R: 0.01% (n = 52)\n\n```\n:::\n:::\n\n\nWhy this dataset? <br> It’s the canonical benchmark for intrusion/anomaly detection and complements NSL-KDD, which addresses redundancy/imbalance issues. Its size, variety of features (categorical + numeric), and labeled attacks make it ideal for comparing statistical (Z-Score, Elliptical Envelope, LOF, DBSCAN) and ML detectors (Isolation Forest, OC-SVM, Deep Autoencoders).\n\n## Questions\n\n1. How effectively can statistical anomaly detection methods identify malicious network traffic within the NSL-KDD dataset?<br>\nOr more specifically, which unsupervised techniques — such as Z-Score, Elliptic Envelope, Local Outlier Factor (LOF), and DBSCAN — perform best in distinguishing normal traffic from various attack families (DoS, Probe, R2L, and U2R)? <br>\n\n2. How does the performance of machine learning–based intrusion detection models compare to traditional statistical anomaly detectors?<br>\nOr more specifically, which algorithms — including Random Forest, Support Vector Machine (SVM), Isolation Forest, and Deep Autoencoders — achieve higher accuracy, precision, and recall when detecting network intrusions, and what trade-offs exist in terms of interpretability and computational cost?\n\n## Analysis plan\n\n**Week 1 –** Problem Definition & Data Preparation\nThe first week focuses on defining the objectives of anomaly detection within the NSL-KDD dataset. The dataset will be loaded, inspected, and preprocessed to ensure analytical readiness. Tasks include handling missing values, encoding categorical features, and scaling numerical variables.\nDeliverables: Data preparation notebook and summary report.\n\n**Week 2 –** Exploratory Data Analysis (EDA)\nThis phase aims to understand data distributions, feature correlations, and patterns of normal versus attack traffic. Visualization techniques will be applied to highlight key discriminative features and potential sources of anomaly.\nDeliverables: EDA notebook with visual insights and descriptive summaries.\n\n**Week 3 –** Statistical Anomaly Detection Methods\nIn this stage, classical statistical methods for anomaly detection will be implemented, including Z-Score, Elliptical Envelope, Local Outlier Factor (LOF), and DBSCAN. Their performance in identifying abnormal network behaviors will be analyzed and compared.\nDeliverables: Statistical anomaly detection notebook and comparative summary.\n\n**Week 4 –** Machine Learning–Based Methods\nModern learning-based detectors will be explored using Isolation Forest, One-Class SVM, and Deep Autoencoders. Models will be tuned for optimal performance, and detection boundaries will be visualized to interpret decision behavior.\nDeliverables: ML anomaly detection notebook and evaluation metrics.\n\n**Week 5 –** Model Evaluation and Comparison\nAll implemented methods will be assessed using standard performance metrics such as Precision, Recall, F1-score, ROC-AUC, and Detection Rate. Comparative analyses and ablation studies will be performed to evaluate robustness and generalization.\nDeliverables: Evaluation notebook and performance report.\n\n**Week 6 –** Final Analysis & Reporting\nThe final week synthesizes results into a comprehensive assessment of the effectiveness of different anomaly detection techniques. The findings will discuss practical implications, advantages, and limitations of each approach in real-world intrusion detection scenarios.\nDeliverables: Final project report and presentation slides.\n\n",
    "supporting": [
      "proposal_files"
    ],
    "filters": [],
    "includes": {}
  }
}