{
  "hash": "6e11ba6e2175b63760b3edc854ef4036",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Anomaly Detection in Network Traffic Using NSL-KDD Dataset\nsubtitle: INFO 523 - Final Project\nauthor:\n  - name: Team 7 - Mehran Tajbakhsh\n    affiliations:\n      - name: College of Information Science, University of Arizona\ndescription: |-\n  Develop and compare supervised and unsupervised approaches for detecting anomalous network behavior in an enterprise-style intrusion detection system (IDS) using the **NSL-KDD dataset**. <br> The NSL-KDD dataset is an enhanced and cleaned version of the original **KDD Cup 1999** dataset, designed to remove redundant records and mitigate class imbalance issues. It contains **41 network connection features** representing protocol type, service, flag indicators, and traffic statistics, along with a target label identifying normal or one of four major attack families: **Denial of Service (DoS)**, **Probe**, **Remote to Local (R2L)**, and **User to Root (U2R)**. <br> The full dataset includes nearly **4 million network connection records**, from which this project uses a **randomly selected 10% subset** to ensure computational feasibility while maintaining representative class proportions. <br>\n  The analysis pipeline includes robust preprocessing — categorical feature encoding (One-Hot Encoding), numeric feature scaling (StandardScaler), and dimensionality reduction (PCA) — followed by both **unsupervised statistical methods** (Z-Score, Elliptic Envelope, LOF, DBSCAN) and **supervised learning models** (Random Forest, SVM, Isolation Forest, Deep Autoencoder). Class imbalance is addressed through **SMOTE oversampling** and **class-weight adjustments**, and unsupervised models apply **percentile-based thresholding** (e.g., 95th percentile) for anomaly classification. <br>\n  Evaluation follows a **stratified 80/20 train–test split** combined with **5-fold cross-validation** and **family-wise performance metrics** (Precision, Recall, F1-Score, ROC-AUC, and Detection Rate). <br> The end goal is to build a **reproducible, interpretable, and scalable intrusion detection framework** suitable for deployment in **enterprise and IoT environments**.\nformat:\n  html:\n    code-tools: true\n    code-overflow: wrap\n    embed-resources: true\neditor: visual\nexecute:\n  warning: false\n  echo: false\n---\n\n## Abstract\n\nThis project designs a reproducible intrusion-detection framework that evaluates both unsupervised and supervised learning on the NSL-KDD dataset. \nBecause the full corpus contains nearly four million connections, we employ a randomly sampled 10% subset to maintain representative class proportions while enabling efficient experimentation. Unsupervised detectors (Z-Score, Elliptic Envelope, Local Outlier Factor, DBSCAN) are trained using only normal traffic and converted to decisions via percentile-based thresholds (e.g., 95th percentile). Supervised and semi-supervised models (Random Forest, SVM, Isolation Forest, Deep Autoencoder) are trained on labeled traffic.<br>\n\nPreprocessing includes one-hot encoding for categorical features (protocol_type, service, flag), standardization of numeric variables, and PCA for dimensionality reduction and visualization. Severe class imbalance—especially in R2L and U2R—is addressed with SMOTE oversampling and class-weight adjustments. Evaluation follows a stratified 80/20 train–test split with 5-fold cross-validation, reporting Precision, Recall, F1-Score, ROC-AUC, Detection Rate, and family-wise performance to expose sensitivity across attack categories. \nModel interpretability leverages feature importance (tree-based models), SHAP explanations (SVM/autoencoders), PCA decision views, and reconstruction-error analyses.<br>\n\nAll experiments use fixed random seeds, versioned notebooks, and dependency pinning for full reproducibility. \nWhile NSL-KDD is dated relative to modern encrypted, high-throughput networks, its labeled structure remains valuable for controlled benchmarking. \nOutcomes include a comparative assessment of accuracy, efficiency, and explainability, along with practical guidance for deploying anomaly-detection components in enterprise and IoT contexts.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}